/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'Doukutsu'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _SCOPETABLE_ENTRY;
struct _DSBUFFERDESC;
struct tWAVEFORMATEX;
struct IDirectSoundBuffer;
struct NOTELIST;
struct IDirectSoundVtbl;
struct _GUID;
struct IUnknown;
struct IUnknownVtbl;
struct _DSCAPS;
struct HWND__;
struct IDirectDrawVtbl;
struct IDirectDrawClipper;
struct tagPALETTEENTRY;
struct IDirectDrawPalette;
struct _DDSURFACEDESC;
struct IDirectDrawSurface;
struct _DDCAPS;
struct IDirectDrawSurfaceVtbl;
struct _DDBLTFX;
struct _DDBLTBATCH;
struct HDC__;
struct _DDOVERLAYFX;
struct IDirectInputAVtbl;
struct IDirectInputDeviceA;
struct DIDEVICEINSTANCEA;
struct HINSTANCE__;
struct IDirectDrawClipperVtbl;
struct _RGNDATA;

/* 25 */
typedef struct _SCOPETABLE_ENTRY *PSCOPETABLE_ENTRY;

/* 93 */
typedef unsigned __int32 DWORD;

/* 1 */
struct _EH3_EXCEPTION_REGISTRATION
{
  struct _EH3_EXCEPTION_REGISTRATION *Next;
  PVOID ExceptionHandler;
  PSCOPETABLE_ENTRY ScopeTable;
  DWORD TryLevel;
};

/* 2 */
#pragma pack(push, 8)
struct struct_0
{
  char anonymous_0[1144];
};
#pragma pack(pop)

/* 3 */
enum Lib_Enums
{
  FLUSHALL = 0x1,
  __V6_HEAP = 0x3,
  inuse = 0x83,
};

/* 4 */
struct CPPEH_RECORD
{
  DWORD old_esp;
  EXCEPTION_POINTERS *exc_ptr;
  struct _EH3_EXCEPTION_REGISTRATION registration;
};

/* 121 */
typedef __int32 LONG;

/* 5 */
#pragma pack(push, 8)
struct tagRECT
{
  LONG left;
  LONG top;
  LONG right;
  LONG bottom;
};
#pragma pack(pop)

/* 7 */
#pragma pack(push, 8)
struct POINT
{
  LONG x;
  LONG y;
};
#pragma pack(pop)

/* 8 */
typedef tagRECT RECT;

/* 6 */
#pragma pack(push, 8)
struct WINDOWPLACEMENT
{
  UINT length;
  UINT flags;
  UINT showCmd;
  POINT ptMinPosition;
  POINT ptMaxPosition;
  RECT rcNormalPosition;
};
#pragma pack(pop)

/* 212 */
typedef HINSTANCE__ *HINSTANCE;

/* 9 */
#pragma pack(push, 8)
struct WNDCLASSEXA
{
  UINT cbSize;
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
  HICON hIconSm;
};
#pragma pack(pop)

/* 130 */
typedef HWND__ *HWND;

/* 10 */
#pragma pack(push, 8)
struct tagMSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};
#pragma pack(pop)

/* 11 */
#pragma pack(push, 8)
struct MSG
{
  HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
};
#pragma pack(pop)

/* 12 */
#pragma pack(push, 8)
struct timecaps_tag
{
  UINT wPeriodMin;
  UINT wPeriodMax;
};
#pragma pack(pop)

/* 96 */
typedef unsigned __int16 WORD;

/* 174 */
typedef void *HANDLE;

/* 13 */
#pragma pack(push, 8)
struct _STARTUPINFOA
{
  DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  LPBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
};
#pragma pack(pop)

/* 14 */
#pragma pack(push, 8)
struct _MEMORY_BASIC_INFORMATION
{
  PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  SIZE_T RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
};
#pragma pack(pop)

/* 119 */
typedef void *LPVOID;

/* 173 */
typedef int BOOL;

/* 15 */
#pragma pack(push, 8)
struct _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
};
#pragma pack(pop)

/* 118 */
typedef unsigned __int8 BYTE;

/* 16 */
#pragma pack(push, 8)
struct _cpinfo
{
  UINT MaxCharSize;
  BYTE DefaultChar[2];
  BYTE LeadByte[12];
  char _padding[2];
};
#pragma pack(pop)

/* 17 */
#pragma pack(push, 8)
struct _FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};
#pragma pack(pop)

/* 19 */
#pragma pack(push, 8)
struct _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E
{
  DWORD LowPart;
  LONG HighPart;
};
#pragma pack(pop)

/* 18 */
#pragma pack(push, 8)
union LARGE_INTEGER
{
  LONGLONG anonymous_0;
  _LARGE_INTEGER::$837407842DC9087486FDFA5FEB63B74E u;
  __int64 QuadPart;
};
#pragma pack(pop)

/* 20 */
#pragma pack(push, 8)
struct FILE
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
};
#pragma pack(pop)

/* 21 */
#pragma pack(push, 8)
struct _SYSTEM_INFO::$41710344DA04EC56A327D4EA11DEF6D2::$AA04DEB0C6383F89F13D312A174572A9
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};
#pragma pack(pop)

/* 22 */
#pragma pack(push, 8)
struct _SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};
#pragma pack(pop)

/* 23 */
#pragma pack(push, 8)
struct SYSTEMTIME
{
  WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
};
#pragma pack(pop)

/* 24 */
#pragma pack(push, 8)
struct FILETIME
{
  DWORD dwLowDateTime;
  DWORD dwHighDateTime;
};
#pragma pack(pop)

/* 26 */
typedef struct _EH3_EXCEPTION_REGISTRATION EH3_EXCEPTION_REGISTRATION;

/* 27 */
typedef struct _EH3_EXCEPTION_REGISTRATION *PEH3_EXCEPTION_REGISTRATION;

/* 28 */
struct _SCOPETABLE_ENTRY
{
  int EnclosingLevel;
  void *FilterFunc;
  void *HandlerFunc;
};

/* 29 */
#pragma pack(push, 8)
struct __declspec(align(4)) Config_Data_File
{
  char proof[32];
  char font_name[64];
  int move_button_mode;
  int attack_button_mode;
  int ok_button_mode;
  int display_mode;
  int joystick_mode;
  int joystick_button[8];
};
#pragma pack(pop)

/* 30 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 31 */
union __declspec(align(16)) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 32 */
struct __m128d
{
  double m128d_f64[2];
};

/* 33 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 34 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectDraw
{
  IDirectDrawVtbl *lpVtbl;
};
#pragma pack(pop)

/* 35 */
struct Some_Rect_Thing
{
  char front;
  char top;
  char back;
  char bottom;
};

/* 36 */
struct NPC_Info
{
  __int16 bits;
  __int16 life;
  __int8 surf;
  __int8 hit_voice;
  __int8 destroy_voice;
  __int8 size;
  int exp;
  int damage;
  Some_Rect_Thing hit;
  Some_Rect_Thing view;
};

/* 37 */
struct __declspec(align(4)) Map_Data
{
  unsigned __int8 *data;
  unsigned __int8 Map_Layout_Buffer[257];
  __int16 Width;
  __int16 Length;
};

/* 38 */
struct NPC_Collision_Flags
{
  int front;
  int top;
  int back;
  int bottom;
};

/* 39 */
#pragma pack(push, 8)
struct __declspec(align(4)) NPC_vars
{
  unsigned __int8 Is_Alive;
  int Collision_flags;
  int X_pos;
  int Y_pos;
  int X_vel;
  int Y_vel;
  int X_vel2;
  int Y_vel2;
  int Curly_Target_X;
  int Curly_Target_Y;
  int Entity_Type;
  int code_flag;
  int Entity_Eve_Num;
  int Entity_Spritesheet;
  int Sound_Hit;
  int Sound_Death;
  int Life;
  int EXP_Amount;
  int Explosion_Size;
  int Direction;
  unsigned __int16 Entity_Flags;
  RECT Rect;
  int ani_wait;
  int Ani_Num;
  int count1;
  int count2;
  int Current_State;
  int Wait_Timer;
  NPC_Collision_Flags Hitbox;
  NPC_Collision_Flags view;
  unsigned __int8 Is_Being_Hit;
  int damage_view;
  int Damage;
  NPC_vars *Parent_NPC;
};
#pragma pack(pop)

/* 40 */
#pragma pack(push, 8)
struct __declspec(align(4)) Effect_vars
{
  int Is_Used;
  int Effect_Num;
  int Direction;
  int X_Pos;
  int Y_Pos;
  int X_Vel;
  int Y_Vel;
  int act_no;
  int act_wait;
  int Ani_Num;
  int Ani_wait;
  int view_left;
  int view_top;
  RECT rect;
};
#pragma pack(pop)

/* 41 */
#pragma pack(push, 8)
struct __declspec(align(4)) Fade_vars
{
  int mode;
  bool bMask;
  int count;
  char ani_no[15][20];
  char flag[15][20];
  char Direction;
};
#pragma pack(pop)

/* 42 */
struct __declspec(align(4)) Map_Header_Struct
{
  char parts[32];
  char Map[32];
  int bkType;
  char Background_File[32];
  char Npc_File[32];
  char Boss_File[32];
  char Boss_Num;
  char Name[32];
};

/* 43 */
#pragma pack(push, 8)
struct __declspec(align(4)) Bullet_vars
{
  int isUsed;
  int code_bullet;
  int flags;
  int isAlive;
  int XPos;
  int YPos;
  int XVel;
  int YVel;
  int targetX;
  int targetY;
  int currentState;
  int act_wait;
  int frameTimer;
  int animationNum;
  unsigned __int8 direction;
  RECT displayRect;
  int count1;
  int count2;
  int lifeTime;
  int damage;
  int life;
  int enemyXL;
  int enemyYL;
  int blockXL;
  int blockYL;
  NPC_Collision_Flags view;
};
#pragma pack(pop)

/* 44 */
enum Directions
{
  Left = 0x0,
  Up = 0x1,
  Right = 0x2,
  Down = 0x3,
};

/* 46 */
#pragma pack(push, 8)
struct __declspec(align(4)) _tiddata
{
  _BYTE gap0[20];
  _DWORD _holdrand;
};
#pragma pack(pop)

/* 48 */
enum MACRO__IOB
{
  _IOB_ENTRIES = 20,
  EOF = -1,
};

/* 50 */
enum MACRO_EPERM
{
  EPERM = 1,
  ENOENT = 2,
  ESRCH = 3,
  EINTR = 4,
  EIO = 5,
  ENXIO = 6,
  E2BIG = 7,
  ENOEXEC = 8,
  EBADF = 9,
  ECHILD = 10,
  EAGAIN = 11,
  ENOMEM = 12,
  EACCES = 13,
  EFAULT = 14,
  EBUSY = 16,
  EEXIST = 17,
  EXDEV = 18,
  ENODEV = 19,
  ENOTDIR = 20,
  EISDIR = 21,
  EINVAL = 22,
  ENFILE = 23,
  EMFILE = 24,
  ENOTTY = 25,
  EFBIG = 27,
  ENOSPC = 28,
  ESPIPE = 29,
  EROFS = 30,
  EMLINK = 31,
  EPIPE = 32,
  EDOM = 33,
  ERANGE = 34,
  EDEADLK = 36,
  ENAMETOOLONG = 38,
  ENOLCK = 39,
  ENOSYS = 40,
  ENOTEMPTY = 41,
  EILSEQ = 42,
};

/* 52 */
enum MACRO_INT
{
  INT_MAX = 2147483647,
  UINT_MAX = -1,
};

/* 53 */
enum MACRO__HEAP
{
  _HEAP_MAXREQ = 0xFFFFFFE0,
  _HEAPEMPTY = 0xFFFFFFFF,
};

/* 55 */
enum MACRO__IONBF
{
  _IONBF = 0x4,
  _IOMYBUF = 0x8,
  _IOEOF = 0x10,
  _IOERR = 0x20,
  _IOSTRG = 0x40,
  _IORW = 0x80,
};

/* 56 */
enum MACRO_SEEK
{
  SEEK_SET = 0,
  SEEK_CUR = 1,
  SEEK_END = 2,
  MMIO_DEFAULTBUFFER = 8192,
};

/* 57 */
enum MACRO__OUT
{
  _OUT_TO_DEFAULT = 0,
  _OUT_TO_STDERR = 1,
  _OUT_TO_MSGBOX = 2,
  _REPORT_ERRMODE = 3,
};

/* 58 */
enum MACRO_FALSE
{
  FALSE = 0,
  TRUE = 1,
};

/* 60 */
enum MACRO_INVALID
{
  INVALID_HANDLE_VALUE = -1,
};

/* 61 */
enum MACRO__IOREAD
{
  _IOREAD = 0x1,
  _IOWRT = 0x2,
};

/* 62 */
enum MACRO_CP_HWND
{
  CP_HWND = 0,
  CP_OPEN = 1,
  CP_DIRECT = 2,
  CP_LEVEL = 3,
  VK_DBE_ALPHANUMERIC = 240,
  VK_DBE_KATAKANA = 241,
  VK_DBE_HIRAGANA = 242,
  VK_DBE_SBCSCHAR = 243,
  VK_DBE_DBCSCHAR = 244,
  VK_DBE_ROMAN = 245,
  VK_DBE_NOROMAN = 246,
  VK_DBE_ENTERWORDREGISTERMODE = 247,
  VK_DBE_ENTERIMECONFIGMODE = 248,
  VK_DBE_FLUSHSTRING = 249,
  VK_DBE_CODEINPUT = 250,
  VK_DBE_NOCODEINPUT = 251,
  VK_DBE_DETERMINESTRING = 252,
  VK_DBE_ENTERDLGCONVERSIONMODE = 253,
};

/* 63 */
enum MACRO__O_SHORT
{
  _O_SHORT_LIVED = 0x1000,
  _O_SEQUENTIAL = 0x20,
  _O_RANDOM = 0x10,
};

/* 64 */
enum NPC_Enums
{
  Free = 0x0,
  In_Use = 0x80,
};

/* 65 */
enum NPC_Names
{
  Nothing = 0x0,
  Weapon_Energy = 0x1,
  Enemy_Behemoth = 0x2,
  Deletes_Itself = 0x3,
  Smoke = 0x4,
  Enemy_Critter_Hopping_Green = 0x5,
  Enemy_Beetle_Horiz_Green = 0x6,
  Enemy_Basil = 0x7,
  Enemy_Beetle_Follow1 = 0x8,
  Balrog_Drop_In = 0x9,
  Boss_Balrog_Shooting = 0xA,
  Projectile_Balrog_Energy_Bounce = 0xB,
  Balrog_Cutscene = 0xC,
  Forcefield = 0xD,
  Santas_Key = 0xE,
  Treasure_Chest_Closed = 0xF,
};

/* 67 */
#pragma pack(push, 8)
struct __declspec(align(4)) Player
{
  unsigned __int8 Flags;
  unsigned int Collision_Flags;
  int Direction;
  int Is_Facing_Up;
  int Is_Facing_Down;
  int Unit;
  int Equipped_Items;
  int X_Pos;
  int Y_Pos;
  int Camera_X_Pos;
  int Camera_Y_Pos;
  int Camera_X_Vel;
  int Camera_Y_Vel;
  int X_Vel;
  int Y_Vel;
  int Animation_Timer;
  int Animation_Num;
  NPC_Collision_Flags Hitbox;
  NPC_Collision_Flags Sizebox;
  RECT Rect;
  RECT Rect_Weapon;
  int level;
  int Level_Bar_Flashes;
  int Exp_To_Gain;
  unsigned __int8 Invincibility_Timer;
  unsigned __int8 Num_Whim_Stars;
  unsigned __int8 Time_Between_Shots;
  unsigned __int8 bubble;
  __int16 Health;
  __int16 star;
  __int16 Max_Health;
  __int16 a;
  int Life_Bar;
  int Health_Bar_Timer;
  int Air;
  int air_get;
  char sprash;
  char ques;
  char boost_sw;
  int Booster_Fuel;
};
#pragma pack(pop)

/* 68 */
struct Weapon_vars
{
  int ID;
  int Level;
  int EXP;
  int Max_Ammo;
  int Ammo;
};

/* 69 */
struct Flash_vars
{
  int mode;
  int act_no;
  int Flash_Flag;
  int cnt;
  int width;
  int X_Pos;
  int Y_Pos;
  RECT rect1;
  RECT rect2;
};

/* 71 */
struct __declspec(align(4)) Map_Data2
{
  char path[260];
  int size;
  char *data;
  char mode;
  char flags;
  int p_read;
  int p_write;
  int line;
  int ypos_line[4];
  int wait;
  int wait_next;
  int next_event;
  char select;
  int face;
  int face_x;
  int item;
  int item_y;
  RECT rcText;
  int offsetY;
  unsigned __int8 wait_beam;
};

/* 72 */
struct Background_vars
{
  int flag;
  int Tile_Width;
  int Tile_Height;
  int numX;
  int numY;
  int Mode;
  int _fx;
};

/* 73 */
struct Camera_vars
{
  int X_Pos;
  int Y_Pos;
  int *Target_X;
  int *Target_Y;
  int Move_Ticks;
  int SoftQuakeDuration;
  int HardQuakeDuration;
};

/* 75 */
typedef void (__cdecl *NPC_function)(NPC_vars *);

/* 76 */
struct Weapon_EXP_values
{
  int exp[3];
};

/* 77 */
typedef void (__cdecl *Effect_function)(Effect_vars *);

/* 78 */
struct Item_Data
{
  int code;
};

/* 79 */
struct Permit_Stage_struct
{
  int index;
  int event;
};

/* 80 */
struct Hell_time_file
{
  int counter[4];
  unsigned __int8 random[4];
};

/* 81 */
struct MapName
{
  int flag;
  int wait;
  char name[32];
};

/* 82 */
struct Boss_Struct
{
  int flag;
  int *pLife;
  int max;
  int br;
  int count;
};

/* 83 */
#pragma pack(push, 8)
struct __declspec(align(4)) Profile_struct
{
  char code[8];
  int Stage_Num;
  int Song_Num;
  int X_Pos;
  int Y_Pos;
  int Direction;
  __int16 Max_HP;
  __int16 star;
  __int16 HP;
  __int16 a;
  int Selected_Weapon;
  int Selected_Item;
  int Equipped_Items;
  int Unit;
  int Game_Time;
  Weapon_vars Weapons[8];
  Item_Data Inventory[32];
  Permit_Stage_struct Unlocked_Stages[8];
  char Map_Flag_Array[128];
  char FLAG[4];
  unsigned __int8 Event_Flags[1000];
};
#pragma pack(pop)

/* 84 */
#pragma pack(push, 8)
struct __declspec(align(4)) TSC_vars
{
  int Length;
  char *Buffer;
  int offset;
  int wait;
  int mode;
  int start_x;
};
#pragma pack(pop)

/* 85 */
struct Illustration_vars
{
  int Act_Num;
  int X_Pos;
};

/* 86 */
struct Text_Obj_vars
{
  int flag;
  int x;
  int y;
  int cast;
  char str[64];
};

/* 87 */
struct Coords
{
  int X_Pos;
  int Y_Pos;
};

/* 88 */
enum Effects_Names
{
  Fountain_Disk = 1,
  Rising_Disc = 2,
  Star = 3,
  Fireball_Impact = 4,
  ZzZ = 5,
  Booster_Smoke = 6,
  Drowned_Quote = 7,
  Exclamation_Mark = 8,
  Level_Up_Or_Down = 9,
  Red_Damage_Rings = 10,
  Big_Explosion = 11,
  Headbump_Sparks = 12,
  Unknown_Unused = 13,
  Small_Explosion_Disc = 14,
  _Nothing = 15,
  Push_Jump_Key = 16,
};

/* 89 */
enum MACRO_WM
{
  WM_NULL = 0x0,
  WM_CREATE = 0x1,
  WM_DESTROY = 0x2,
  WM_MOVE = 0x3,
  WM_SIZEWAIT = 0x4,
  WM_SIZE = 0x5,
  WM_ACTIVATE = 0x6,
  WM_SETFOCUS = 0x7,
  WM_KILLFOCUS = 0x8,
  WM_SETVISIBLE = 0x9,
  WM_ENABLE = 0xA,
  WM_SETREDRAW = 0xB,
  WM_SETTEXT = 0xC,
  WM_GETTEXT = 0xD,
  WM_GETTEXTLENGTH = 0xE,
  WM_PAINT = 0xF,
  WM_CLOSE = 0x10,
  WM_QUERYENDSESSION = 0x11,
  WM_QUIT = 0x12,
  WM_QUERYOPEN = 0x13,
  WM_ERASEBKGND = 0x14,
  WM_SYSCOLORCHANGE = 0x15,
  WM_ENDSESSION = 0x16,
  WM_SYSTEMERROR = 0x17,
  WM_SHOWWINDOW = 0x18,
  WM_CTLCOLOR = 0x19,
  WM_WININICHANGE = 0x1A,
  WM_SETTINGCHANGE = 0x1A,
  WM_DEVMODECHANGE = 0x1B,
  WM_ACTIVATEAPP = 0x1C,
  WM_FONTCHANGE = 0x1D,
  WM_TIMECHANGE = 0x1E,
  WM_CANCELMODE = 0x1F,
  WM_SETCURSOR = 0x20,
  WM_MOUSEACTIVATE = 0x21,
  WM_CHILDACTIVATE = 0x22,
  WM_QUEUESYNC = 0x23,
  WM_GETMINMAXINFO = 0x24,
  WM_LOGOFF = 0x25,
  WM_PAINTICON = 0x26,
  WM_ICONERASEBKGND = 0x27,
  WM_NEXTDLGCTL = 0x28,
  WM_ALTTABACTIVE = 0x29,
  WM_SPOOLERSTATUS = 0x2A,
  WM_DRAWITEM = 0x2B,
  WM_MEASUREITEM = 0x2C,
  WM_DELETEITEM = 0x2D,
  WM_VKEYTOITEM = 0x2E,
  WM_CHARTOITEM = 0x2F,
  WM_SETFONT = 0x30,
  WM_GETFONT = 0x31,
  WM_SETHOTKEY = 0x32,
  WM_GETHOTKEY = 0x33,
  WM_FILESYSCHANGE = 0x34,
  WM_ISACTIVEICON = 0x35,
  WM_QUERYPARKICON = 0x36,
  WM_QUERYDRAGICON = 0x37,
  WM_WINHELP = 0x38,
  WM_COMPAREITEM = 0x39,
  WM_FULLSCREEN = 0x3A,
  WM_CLIENTSHUTDOWN = 0x3B,
  WM_DDEMLEVENT = 0x3C,
  WM_GETOBJECT = 0x3D,
  MM_CALCSCROLL = 0x3F,
  WM_TESTING = 0x40,
  WM_COMPACTING = 0x41,
  WM_OTHERWINDOWCREATED = 0x42,
  WM_OTHERWINDOWDESTROYED = 0x43,
  WM_COMMNOTIFY = 0x44,
  WM_MEDIASTATUSCHANGE = 0x45,
  WM_WINDOWPOSCHANGING = 0x46,
  WM_WINDOWPOSCHANGED = 0x47,
  WM_POWER = 0x48,
  WM_COPYGLOBALDATA = 0x49,
  WM_COPYDATA = 0x4A,
  WM_CANCELJOURNAL = 0x4B,
  WM_LOGONNOTIFY = 0x4C,
  WM_KEYF1 = 0x4D,
  WM_NOTIFY = 0x4E,
  WM_ACCESS_WINDOW = 0x4F,
  WM_INPUTLANGCHANGEREQUEST = 0x50,
  WM_INPUTLANGCHANGE = 0x51,
  WM_TCARD = 0x52,
  WM_HELP = 0x53,
  WM_USERCHANGED = 0x54,
  WM_NOTIFYFORMAT = 0x55,
  WM_QM_ACTIVATE = 0x60,
  WM_HOOK_DO_CALLBACK = 0x61,
  WM_SYSCOPYDATA = 0x62,
  WM_FINALDESTROY = 0x70,
  WM_MEASUREITEM_CLIENTDATA = 0x71,
  WM_CONTEXTMENU = 0x7B,
  WM_STYLECHANGING = 0x7C,
  WM_STYLECHANGED = 0x7D,
  WM_DISPLAYCHANGE = 0x7E,
  WM_GETICON = 0x7F,
  WM_SETICON = 0x80,
  WM_NCCREATE = 0x81,
  WM_NCDESTROY = 0x82,
  WM_NCCALCSIZE = 0x83,
  WM_NCHITTEST = 0x84,
  WM_NCPAINT = 0x85,
  WM_NCACTIVATE = 0x86,
  WM_GETDLGCODE = 0x87,
  WM_SYNCPAINT = 0x88,
  WM_SYNCTASK = 0x89,
  WM_NCMOUSEMOVE = 0xA0,
  WM_NCLBUTTONDOWN = 0xA1,
  WM_NCLBUTTONUP = 0xA2,
  WM_NCLBUTTONDBLCLK = 0xA3,
  WM_NCRBUTTONDOWN = 0xA4,
  WM_NCRBUTTONUP = 0xA5,
  WM_NCRBUTTONDBLCLK = 0xA6,
  WM_NCMBUTTONDOWN = 0xA7,
  WM_NCMBUTTONUP = 0xA8,
  WM_NCMBUTTONDBLCLK = 0xA9,
  WM_NCXBUTTONDOWN = 0xAB,
  WM_NCXBUTTONUP = 0xAC,
  WM_NCXBUTTONDBLCLK = 0xAD,
  EM_GETSEL = 0xB0,
  EM_SETSEL = 0xB1,
  EM_GETRECT = 0xB2,
  EM_SETRECT = 0xB3,
  EM_SETRECTNP = 0xB4,
  EM_SCROLL = 0xB5,
  EM_LINESCROLL = 0xB6,
  EM_SCROLLCARET = 0xB7,
  EM_GETMODIFY = 0xB8,
  EM_SETMODIFY = 0xB9,
  EM_GETLINECOUNT = 0xBA,
  EM_LINEINDEX = 0xBB,
  EM_SETHANDLE = 0xBC,
  EM_GETHANDLE = 0xBD,
  EM_GETTHUMB = 0xBE,
  EM_LINELENGTH = 0xC1,
  EM_REPLACESEL = 0xC2,
  EM_SETFONT = 0xC3,
  EM_GETLINE = 0xC4,
  EM_LIMITTEXT = 0xC5,
  EM_CANUNDO = 0xC6,
  EM_UNDO = 0xC7,
  EM_FMTLINES = 0xC8,
  EM_LINEFROMCHAR = 0xC9,
  EM_SETWORDBREAK = 0xCA,
  EM_SETTABSTOPS = 0xCB,
  EM_SETPASSWORDCHAR = 0xCC,
  EM_EMPTYUNDOBUFFER = 0xCD,
  EM_GETFIRSTVISIBLELINE = 0xCE,
  EM_SETREADONLY = 0xCF,
  EM_SETWORDBREAKPROC = 0xD0,
  EM_GETWORDBREAKPROC = 0xD1,
  EM_GETPASSWORDCHAR = 0xD2,
  EM_SETMARGINS = 0xD3,
  EM_GETMARGINS = 0xD4,
  EM_POSFROMCHAR = 0xD5,
  EM_CHARFROMPOS = 0xD6,
  SBM_SETPOS = 0xE0,
  SBM_GETPOS = 0xE1,
  SBM_SETRANGE = 0xE2,
  SBM_GETRANGE = 0xE3,
  SBM_ENABLE_ARROWS = 0xE4,
  SBM_SETRANGEREDRAW = 0xE6,
  SBM_SETSCROLLINFO = 0xE9,
  SBM_GETSCROLLINFO = 0xEA,
  SBM_GETSCROLLBARINFO = 0xEB,
  BM_GETCHECK = 0xF0,
  BM_SETCHECK = 0xF1,
  BM_GETSTATE = 0xF2,
  BM_SETSTATE = 0xF3,
  BM_SETSTYLE = 0xF4,
  BM_CLICK = 0xF5,
  BM_GETIMAGE = 0xF6,
  BM_SETIMAGE = 0xF7,
  BM_SETDONTCLICK = 0xF8,
  WM_INPUT = 0xFF,
  WM_KEYFIRST = 0x100,
  WM_KEYDOWN = 0x100,
  WM_KEYUP = 0x101,
  WM_CHAR = 0x102,
  WM_DEADCHAR = 0x103,
  WM_SYSKEYDOWN = 0x104,
  WM_SYSKEYUP = 0x105,
  WM_SYSCHAR = 0x106,
  WM_SYSDEADCHAR = 0x107,
  WM_KEYLAST = 0x108,
  WM_YOMICHAR = 0x108,
  WM_UNICHAR = 0x109,
  WM_CONVERTREQUEST = 0x10A,
  WM_CONVERTRESULT = 0x10B,
  WM_IM_INFO = 0x10C,
  WM_IME_STARTCOMPOSITION = 0x10D,
  WM_IME_ENDCOMPOSITION = 0x10E,
  WM_IME_COMPOSITION = 0x10F,
  WM_IME_KEYLAST = 0x10F,
  WM_INITDIALOG = 0x110,
  WM_COMMAND = 0x111,
  WM_SYSCOMMAND = 0x112,
  WM_TIMER = 0x113,
  WM_HSCROLL = 0x114,
  WM_VSCROLL = 0x115,
  WM_INITMENU = 0x116,
  WM_INITMENUPOPUP = 0x117,
  WM_SYSTIMER = 0x118,
  WM_MENUSELECT = 0x11F,
  WM_MENUCHAR = 0x120,
  WM_ENTERIDLE = 0x121,
  WM_MENURBUTTONUP = 0x122,
  WM_MENUDRAG = 0x123,
  WM_MENUGETOBJECT = 0x124,
  WM_UNINITMENUPOPUP = 0x125,
  WM_MENUCOMMAND = 0x126,
  WM_CHANGEUISTATE = 0x127,
  WM_UPDATEUISTATE = 0x128,
  WM_QUERYUISTATE = 0x129,
  WM_LBTRACKPOINT = 0x131,
  WM_CTLCOLORMSGBOX = 0x132,
  WM_CTLCOLOREDIT = 0x133,
  WM_CTLCOLORLISTBOX = 0x134,
  WM_CTLCOLORBTN = 0x135,
  WM_CTLCOLORDLG = 0x136,
  WM_CTLCOLORSCROLLBAR = 0x137,
  WM_CTLCOLORSTATIC = 0x138,
  CB_GETEDITSEL = 0x140,
  CB_LIMITTEXT = 0x141,
  CB_SETEDITSEL = 0x142,
  CB_ADDSTRING = 0x143,
  CB_DELETESTRING = 0x144,
  CB_DIR = 0x145,
  CB_GETCOUNT = 0x146,
  CB_GETCURSEL = 0x147,
  CB_GETLBTEXT = 0x148,
  CB_GETLBTEXTLEN = 0x149,
  CB_INSERTSTRING = 0x14A,
  CB_RESETCONTENT = 0x14B,
  CB_FINDSTRING = 0x14C,
  CB_SELECTSTRING = 0x14D,
  CB_SETCURSEL = 0x14E,
  CB_SHOWDROPDOWN = 0x14F,
  CB_GETITEMDATA = 0x150,
  CB_SETITEMDATA = 0x151,
  CB_GETDROPPEDCONTROLRECT = 0x152,
  CB_SETITEMHEIGHT = 0x153,
  CB_GETITEMHEIGHT = 0x154,
  CB_SETEXTENDEDUI = 0x155,
  CB_GETEXTENDEDUI = 0x156,
  CB_GETDROPPEDSTATE = 0x157,
  CB_FINDSTRINGEXACT = 0x158,
  CB_SETLOCALE = 0x159,
  CB_GETLOCALE = 0x15A,
  CB_GETTOPINDEX = 0x15B,
  CB_SETTOPINDEX = 0x15C,
  CB_GETHORIZONTALEXTENT = 0x15D,
  CB_SETHORIZONTALEXTENT = 0x15E,
  CB_GETDROPPEDWIDTH = 0x15F,
  CB_SETDROPPEDWIDTH = 0x160,
  CB_INITSTORAGE = 0x161,
  CB_GETCOMBOBOXINFO = 0x164,
  STM_SETICON = 0x170,
  STM_GETICON = 0x171,
  STM_SETIMAGE = 0x172,
  STM_GETIMAGE = 0x173,
  LB_ADDSTRING = 0x180,
  LB_INSERTSTRING = 0x181,
  LB_DELETESTRING = 0x182,
  LB_SELITEMRANGEEX = 0x183,
  LB_RESETCONTENT = 0x184,
  LB_SETSEL = 0x185,
  LB_SETCURSEL = 0x186,
  LB_GETSEL = 0x187,
  LB_GETCURSEL = 0x188,
  LB_GETTEXT = 0x189,
  LB_GETTEXTLEN = 0x18A,
  LB_GETCOUNT = 0x18B,
  LB_SELECTSTRING = 0x18C,
  LB_DIR = 0x18D,
  LB_GETTOPINDEX = 0x18E,
  LB_FINDSTRING = 0x18F,
  LB_GETSELCOUNT = 0x190,
  LB_GETSELITEMS = 0x191,
  LB_SETTABSTOPS = 0x192,
  LB_GETHORIZONTALEXTENT = 0x193,
  LB_SETHORIZONTALEXTENT = 0x194,
  LB_SETCOLUMNWIDTH = 0x195,
  LB_ADDFILE = 0x196,
  LB_SETTOPINDEX = 0x197,
  LB_GETITEMRECT = 0x198,
  LB_GETITEMDATA = 0x199,
  LB_SETITEMDATA = 0x19A,
  LB_SELITEMRANGE = 0x19B,
  LB_SETANCHORINDEX = 0x19C,
  LB_GETANCHORINDEX = 0x19D,
  LB_SETCARETINDEX = 0x19E,
  LB_GETCARETINDEX = 0x19F,
  LB_SETITEMHEIGHT = 0x1A0,
  LB_GETITEMHEIGHT = 0x1A1,
  LB_FINDSTRINGEXACT = 0x1A2,
  LBCB_CARETON = 0x1A3,
  LBCB_CARETOFF = 0x1A4,
  LB_SETLOCALE = 0x1A5,
  LB_GETLOCALE = 0x1A6,
  LB_SETCOUNT = 0x1A7,
  LB_INITSTORAGE = 0x1A8,
  LB_ITEMFROMPOINT = 0x1A9,
  LB_INSERTSTRINGUPPER = 0x1AA,
  LB_INSERTSTRINGLOWER = 0x1AB,
  LB_ADDSTRINGUPPER = 0x1AC,
  LB_ADDSTRINGLOWER = 0x1AD,
  LB_GETLISTBOXINFO = 0x1B2,
  MN_SETHMENU = 0x1E0,
  MN_GETHMENU = 0x1E1,
  MN_SIZEWINDOW = 0x1E2,
  MN_OPENHIERARCHY = 0x1E3,
  MN_CLOSEHIERARCHY = 0x1E4,
  MN_SELECTITEM = 0x1E5,
  MN_CANCELMENUS = 0x1E6,
  MN_SELECTFIRSTVALIDITEM = 0x1E7,
  MN_GETPPOPUPMENU = 0x1EA,
  MN_FINDMENUWINDOWFROMPOINT = 0x1EB,
  MN_SHOWPOPUPWINDOW = 0x1EC,
  MN_BUTTONDOWN = 0x1ED,
  MN_MOUSEMOVE = 0x1EE,
  MN_BUTTONUP = 0x1EF,
  MN_SETTIMERTOOPENHIERARCHY = 0x1F0,
  MN_DBLCLK = 0x1F1,
  WM_MOUSEFIRST = 0x200,
  WM_MOUSEMOVE = 0x200,
  WM_LBUTTONDOWN = 0x201,
  WM_LBUTTONUP = 0x202,
  WM_LBUTTONDBLCLK = 0x203,
  WM_RBUTTONDOWN = 0x204,
  WM_RBUTTONUP = 0x205,
  WM_RBUTTONDBLCLK = 0x206,
  WM_MBUTTONDOWN = 0x207,
  WM_MBUTTONUP = 0x208,
  WM_MBUTTONDBLCLK = 0x209,
  WM_MOUSEWHEEL = 0x20A,
  WM_XBUTTONDOWN = 0x20B,
  WM_XBUTTONUP = 0x20C,
  WM_XBUTTONDBLCLK = 0x20D,
  WM_MOUSELAST = 0x20D,
  WM_PARENTNOTIFY = 0x210,
  WM_ENTERMENULOOP = 0x211,
  WM_EXITMENULOOP = 0x212,
  WM_NEXTMENU = 0x213,
  WM_SIZING = 0x214,
  WM_CAPTURECHANGED = 0x215,
  WM_MOVING = 0x216,
  WM_POWERBROADCAST = 0x218,
  WM_DEVICECHANGE = 0x219,
  WM_MDICREATE = 0x220,
  WM_MDIDESTROY = 0x221,
  WM_MDIACTIVATE = 0x222,
  WM_MDIRESTORE = 0x223,
  WM_MDINEXT = 0x224,
  WM_MDIMAXIMIZE = 0x225,
  WM_MDITILE = 0x226,
  WM_MDICASCADE = 0x227,
  WM_MDIICONARRANGE = 0x228,
  WM_MDIGETACTIVE = 0x229,
  WM_DROPOBJECT = 0x22A,
  WM_QUERYDROPOBJECT = 0x22B,
  WM_BEGINDRAG = 0x22C,
  WM_DRAGLOOP = 0x22D,
  WM_DRAGSELECT = 0x22E,
  WM_DRAGMOVE = 0x22F,
  WM_MDISETMENU = 0x230,
  WM_ENTERSIZEMOVE = 0x231,
  WM_EXITSIZEMOVE = 0x232,
  WM_DROPFILES = 0x233,
  WM_MDIREFRESHMENU = 0x234,
  WM_HANGEULFIRST = 0x280,
  WM_KANJIFIRST = 0x280,
  WM_IME_SETCONTEXT = 0x281,
  WM_IME_NOTIFY = 0x282,
  WM_IME_CONTROL = 0x283,
  WM_IME_COMPOSITIONFULL = 0x284,
  WM_IME_SELECT = 0x285,
  WM_IME_CHAR = 0x286,
  WM_IME_SYSTEM = 0x287,
  WM_IME_REQUEST = 0x288,
  WM_IME_KEYDOWN = 0x290,
  WM_IME_KEYUP = 0x291,
  WM_HANGEULLAST = 0x29F,
  WM_KANJILAST = 0x29F,
  WM_NCMOUSEHOVER = 0x2A0,
  WM_MOUSEHOVER = 0x2A1,
  WM_NCMOUSELEAVE = 0x2A2,
  WM_MOUSELEAVE = 0x2A3,
  WM_TRACKMOUSEEVENT_LAST = 0x2AF,
  WM_WTSSESSION_CHANGE = 0x2B1,
  WM_TABLET_FIRST = 0x2C0,
  WM_TABLET_LAST = 0x2DF,
  WM_CUT = 0x300,
  WM_COPY = 0x301,
  WM_PASTE = 0x302,
  WM_CLEAR = 0x303,
  WM_UNDO = 0x304,
  WM_RENDERFORMAT = 0x305,
  WM_RENDERALLFORMATS = 0x306,
  WM_DESTROYCLIPBOARD = 0x307,
  WM_DRAWCLIPBOARD = 0x308,
  WM_PAINTCLIPBOARD = 0x309,
  WM_VSCROLLCLIPBOARD = 0x30A,
  WM_SIZECLIPBOARD = 0x30B,
  WM_ASKCBFORMATNAME = 0x30C,
  WM_CHANGECBCHAIN = 0x30D,
  WM_HSCROLLCLIPBOARD = 0x30E,
  WM_QUERYNEWPALETTE = 0x30F,
  WM_PALETTEISCHANGING = 0x310,
  WM_PALETTECHANGED = 0x311,
  WM_HOTKEY = 0x312,
  WM_SYSMENU = 0x313,
  WM_HOOKMSG = 0x314,
  WM_EXITPROCESS = 0x315,
  WM_WAKETHREAD = 0x316,
  WM_PRINT = 0x317,
  WM_PRINTCLIENT = 0x318,
  WM_APPCOMMAND = 0x319,
  WM_THEMECHANGED = 0x31A,
  WM_HANDHELDFIRST = 0x358,
  WM_HANDHELDLAST = 0x35F,
  WM_AFXFIRST = 0x360,
  WM_AFXLAST = 0x37F,
  WM_PENWINFIRST = 0x380,
  WM_PENWINLAST = 0x38F,
  WM_INTERNAL_COALESCE_FIRST = 0x390,
  WM_COALESCE_FIRST = 0x390,
  WM_COALESCE_LAST = 0x39F,
  WM_MM_RESERVED_FIRST = 0x3A0,
  WM_MM_RESERVED_LAST = 0x3DF,
  WM_DDE_INITIATE = 0x3E0,
  WM_DDE_TERMINATE = 0x3E1,
  WM_DDE_ADVISE = 0x3E2,
  WM_DDE_UNADVISE = 0x3E3,
  WM_DDE_ACK = 0x3E4,
  WM_DDE_DATA = 0x3E5,
  WM_DDE_REQUEST = 0x3E6,
  WM_DDE_POKE = 0x3E7,
  WM_DDE_EXECUTE = 0x3E8,
  WM_DBNOTIFICATION = 0x3FD,
  WM_NETCONNECT = 0x3FE,
  WM_HIBERNATE = 0x3FF,
  WM_USER = 0x400,
  WM_APP = 0x8000,
};

/* 90 */
enum MACRO_VK
{
  VK_LBUTTON = 0x1,
  VK_RBUTTON = 0x2,
  VK_CANCEL = 0x3,
  VK_MBUTTON = 0x4,
  VK_BACK = 0x8,
  VK_TAB = 0x9,
  VK_CLEAR = 0xC,
  VK_RETURN = 0xD,
  VK_SHIFT = 0x10,
  VK_CONTROL = 0x11,
  VK_MENU = 0x12,
  VK_PAUSE = 0x13,
  VK_CAPITAL = 0x14,
  VK_KANA = 0x15,
  VK_HANGEUL = 0x15,
  VK_HANGUL = 0x15,
  VK_JUNJA = 0x17,
  VK_FINAL = 0x18,
  VK_HANJA = 0x19,
  VK_KANJI = 0x19,
  VK_ESCAPE = 0x1B,
  VK_CONVERT = 0x1C,
  VK_NONCONVERT = 0x1D,
  VK_ACCEPT = 0x1E,
  VK_MODECHANGE = 0x1F,
  VK_SPACE = 0x20,
  VK_PRIOR = 0x21,
  VK_NEXT = 0x22,
  VK_END = 0x23,
  VK_HOME = 0x24,
  VK_LEFT = 0x25,
  VK_UP = 0x26,
  VK_RIGHT = 0x27,
  VK_DOWN = 0x28,
  VK_SELECT = 0x29,
  VK_PRINT = 0x2A,
  VK_EXECUTE = 0x2B,
  VK_SNAPSHOT = 0x2C,
  VK_INSERT = 0x2D,
  VK_DELETE = 0x2E,
  VK_HELP = 0x2F,
  VK_LWIN = 0x5B,
  VK_RWIN = 0x5C,
  VK_APPS = 0x5D,
  VK_NUMPAD0 = 0x60,
  VK_NUMPAD1 = 0x61,
  VK_NUMPAD2 = 0x62,
  VK_NUMPAD3 = 0x63,
  VK_NUMPAD4 = 0x64,
  VK_NUMPAD5 = 0x65,
  VK_NUMPAD6 = 0x66,
  VK_NUMPAD7 = 0x67,
  VK_NUMPAD8 = 0x68,
  VK_NUMPAD9 = 0x69,
  VK_MULTIPLY = 0x6A,
  VK_ADD = 0x6B,
  VK_SEPARATOR = 0x6C,
  VK_SUBTRACT = 0x6D,
  VK_DECIMAL = 0x6E,
  VK_DIVIDE = 0x6F,
  VK_F1 = 0x70,
  VK_F2 = 0x71,
  VK_F3 = 0x72,
  VK_F4 = 0x73,
  VK_F5 = 0x74,
  VK_F6 = 0x75,
  VK_F7 = 0x76,
  VK_F8 = 0x77,
  VK_F9 = 0x78,
  VK_F10 = 0x79,
  VK_F11 = 0x7A,
  VK_F12 = 0x7B,
  VK_F13 = 0x7C,
  VK_F14 = 0x7D,
  VK_F15 = 0x7E,
  VK_F16 = 0x7F,
  VK_F17 = 0x80,
  VK_F18 = 0x81,
  VK_F19 = 0x82,
  VK_F20 = 0x83,
  VK_F21 = 0x84,
  VK_F22 = 0x85,
  VK_F23 = 0x86,
  VK_F24 = 0x87,
  VK_NUMLOCK = 0x90,
  VK_SCROLL = 0x91,
  VK_LSHIFT = 0xA0,
  VK_RSHIFT = 0xA1,
  VK_LCONTROL = 0xA2,
  VK_RCONTROL = 0xA3,
  VK_LMENU = 0xA4,
  VK_RMENU = 0xA5,
  VK_PROCESSKEY = 0xE5,
  VK_ATTN = 0xF6,
  VK_CRSEL = 0xF7,
  VK_EXSEL = 0xF8,
  VK_EREOF = 0xF9,
  VK_PLAY = 0xFA,
  VK_ZOOM = 0xFB,
  VK_NONAME = 0xFC,
  VK_PA1 = 0xFD,
  VK_OEM_CLEAR = 0xFE,
  WH_MIN = 0xFFFFFFFF,
};

/* 91 */
typedef _DSBUFFERDESC DSBUFFERDESC;

/* 94 */
typedef tWAVEFORMATEX *LPWAVEFORMATEX;

/* 92 */
struct _DSBUFFERDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwBufferBytes;
  DWORD dwReserved;
  LPWAVEFORMATEX lpwfxFormat;
};

/* 95 */
#pragma pack(push, 1)
struct tWAVEFORMATEX
{
  WORD wFormatTag;
  WORD nChannels;
  DWORD nSamplesPerSec;
  DWORD nAvgBytesPerSec;
  WORD nBlockAlign;
  WORD wBitsPerSample;
  WORD cbSize;
};
#pragma pack(pop)

/* 97 */
enum MACRO_DSBPLAY
{
  DSBPLAY_LOOPING = 0x1,
};

/* 98 */
enum MACRO_DSBCAPS
{
  DSBCAPS_PRIMARYBUFFER = 0x1,
  DSBCAPS_STATIC = 0x2,
  DSBCAPS_LOCHARDWARE = 0x4,
  DSBCAPS_LOCSOFTWARE = 0x8,
  DSBCAPS_CTRL3D = 0x10,
  DSBCAPS_CTRLFREQUENCY = 0x20,
  DSBCAPS_CTRLPAN = 0x40,
  DSBCAPS_CTRLVOLUME = 0x80,
  DSBCAPS_CTRLPOSITIONNOTIFY = 0x100,
};

/* 99 */
struct tagOCTWAVE
{
  __int16 wave_size;
  __int16 oct_par;
  __int16 oct_size;
};

/* 100 */
typedef struct tagOCTWAVE OCTWAVE;

/* 124 */
typedef IDirectSoundBuffer *LPDIRECTSOUNDBUFFER;

/* 101 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectSoundBufferVtbl
{
  void (__cdecl *QueryInterface)();
  void (__cdecl *AddRef)();
  void (__cdecl *Release)(_DWORD);
  void (__cdecl *GetCaps)();
  void (__cdecl *GetCurrentPosition)();
  void (__cdecl *GetFormat)();
  void (__cdecl *GetVolume)();
  void (__cdecl *GetPan)();
  void (__cdecl *GetFrequency)();
  void (__cdecl *GetStatus)();
  void (__cdecl *Initialize)();
  int (__cdecl *Lock)(LPDIRECTSOUNDBUFFER, _DWORD, size_t, LPVOID *, size_t *, LPVOID *, size_t *, _DWORD);
  void (__cdecl *Play)(_DWORD, _DWORD, _DWORD, _DWORD);
  void (__cdecl *SetCurrentPosition)(LPDIRECTSOUNDBUFFER, _DWORD);
  void (__cdecl *SetFormat)();
  void (__stdcall *SetVolume)(_DWORD, _DWORD);
  void (__stdcall *SetPan)(_DWORD, _DWORD);
  void (__cdecl *SetFrequency)(LPDIRECTSOUNDBUFFER, int);
  void (__cdecl *Stop)(_DWORD);
  void (__cdecl *Unlock)(LPDIRECTSOUNDBUFFER, LPVOID, size_t, LPVOID, size_t);
  void (__cdecl *Restore)();
};
#pragma pack(pop)

/* 102 */
enum DefOrg
{
  MAXNOTELENGTH = 0xFF,
  MAXMELODY = 0x8,
  MAXDRAM = 0x8,
  MAXTRACK = 0x10,
  KEYDUMMY = 0xFF,
  PANDUMMY = 0xFF,
  VOLDUMMY = 0xFF,
  SETALL = 0xFFFFFFFF,
  SETWAIT = 0x1,
  SETGRID = 0x2,
  SETALLOC = 0x4,
  SETREPEAT = 0x8,
  SETFREQ = 0x10,
  SETWAVE = 0x20,
  SETPIPI = 0x40,
  ALLOCNOTE = 0x1000,
  MODEPARADD = 0x0,
  MODEPARSUB = 0x1,
  MODEMULTIPLY = 0xA,
  MODEDECAY = 0x40,
  NUMDRAMITEM = 0x2A,
};

/* 103 */
struct IDirectSoundBuffer
{
  IDirectSoundBufferVtbl *lpVtbl;
};

/* 110 */
struct tagTRACKDATA
{
  unsigned __int16 freq;
  unsigned __int8 wave_no;
  char pipi;
  NOTELIST *note_p;
  NOTELIST *note_list;
};

/* 111 */
typedef struct tagTRACKDATA TRACKDATA;

/* 104 */
struct MUSICINFO
{
  unsigned __int16 wait;
  unsigned __int8 line;
  unsigned __int8 dot;
  unsigned __int16 alloc_note;
  __int32 repeat_x;
  __int32 end_x;
  TRACKDATA tdata[16];
};

/* 105 */
struct tagNOTECOPY
{
  char track1;
  __int32 x1_1;
  __int32 x1_2;
  char track2;
  __int32 x2;
  __int32 num;
};

/* 106 */
typedef struct tagNOTECOPY NOTECOPY;

/* 107 */
struct tagPARCHANGE
{
  char track;
  __int32 x1;
  __int32 x2;
  unsigned __int8 a;
  unsigned __int8 mode;
};

/* 108 */
typedef struct tagPARCHANGE PARCHANGE;

/* 109 */
#pragma pack(push, 8)
struct __declspec(align(4)) NOTELIST
{
  NOTELIST *from;
  NOTELIST *to;
  __int32 x;
  unsigned __int8 length;
  unsigned __int8 y;
  unsigned __int8 volume;
  unsigned __int8 pan;
};
#pragma pack(pop)

/* 112 */
struct OrgData
{
  MUSICINFO info;
  char track;
};

/* 113 */
struct IDirectSound
{
  IDirectSoundVtbl *lpVtbl;
};

/* 120 */
typedef LONG HRESULT;

/* 116 */
typedef _GUID GUID;

/* 115 */
typedef GUID IID;

/* 122 */
typedef unsigned __int32 ULONG;

/* 128 */
typedef _DSCAPS *LPDSCAPS;

/* 132 */
typedef DWORD *LPDWORD;

/* 133 */
typedef GUID *LPGUID;

/* 114 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectSoundVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectSound *This, const IID *const , LPVOID *);
  ULONG (__stdcall *AddRef)(IDirectSound *This);
  ULONG (__stdcall *Release)(IDirectSound *This);
  int (__cdecl *CreateSoundBuffer)(LPDIRECTSOUND This, DSBUFFERDESC *, LPDIRECTSOUNDBUFFER *, DWORD);
  HRESULT (__stdcall *GetCaps)(IDirectSound *This, LPDSCAPS);
  HRESULT (__stdcall *DuplicateSoundBuffer)(IDirectSound *This, LPDIRECTSOUNDBUFFER, LPDIRECTSOUNDBUFFER *);
  void (__cdecl *SetCooperativeLevel)(LPDIRECTSOUND, HWND, signed int);
  HRESULT (__stdcall *Compact)(IDirectSound *This);
  HRESULT (__stdcall *GetSpeakerConfig)(IDirectSound *This, LPDWORD);
  HRESULT (__stdcall *SetSpeakerConfig)(IDirectSound *This, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectSound *This, LPGUID);
};
#pragma pack(pop)

/* 117 */
struct _GUID
{
  DWORD Data1;
  WORD Data2;
  WORD Data3;
  BYTE Data4[8];
};

/* 123 */
typedef const DSBUFFERDESC *LPCDSBUFFERDESC;

/* 125 */
typedef IUnknown *LPUNKNOWN;

/* 126 */
#pragma pack(push, 8)
struct IUnknown
{
  IUnknownVtbl *lpVtbl;
};
#pragma pack(pop)

/* 127 */
#pragma pack(push, 8)
struct IUnknownVtbl
{
  HRESULT (__stdcall *QueryInterface)(IUnknown *This, const IID *const riid, void **ppvObject);
  ULONG (__stdcall *AddRef)(IUnknown *This);
  ULONG (__stdcall *Release)(IUnknown *This);
};
#pragma pack(pop)

/* 129 */
struct _DSCAPS
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwMinSecondarySampleRate;
  DWORD dwMaxSecondarySampleRate;
  DWORD dwPrimaryBuffers;
  DWORD dwMaxHwMixingAllBuffers;
  DWORD dwMaxHwMixingStaticBuffers;
  DWORD dwMaxHwMixingStreamingBuffers;
  DWORD dwFreeHwMixingAllBuffers;
  DWORD dwFreeHwMixingStaticBuffers;
  DWORD dwFreeHwMixingStreamingBuffers;
  DWORD dwMaxHw3DAllBuffers;
  DWORD dwMaxHw3DStaticBuffers;
  DWORD dwMaxHw3DStreamingBuffers;
  DWORD dwFreeHw3DAllBuffers;
  DWORD dwFreeHw3DStaticBuffers;
  DWORD dwFreeHw3DStreamingBuffers;
  DWORD dwTotalHwMemBytes;
  DWORD dwFreeHwMemBytes;
  DWORD dwMaxContigFreeHwMemBytes;
  DWORD dwUnlockTransferRateHwBuffers;
  DWORD dwPlayCpuOverheadSwBuffers;
  DWORD dwReserved1;
  DWORD dwReserved2;
};

/* 131 */
struct HWND__
{
  int unused;
};

/* 134 */
struct TRACKDATA_file
{
  __int16 freq;
  char wave_no;
  char pipi;
  __int16 note_num;
};

/* 135 */
struct MUSICINFO_file
{
  __int16 wait;
  char line;
  char dot;
  int repeat_x;
  int end_x;
  TRACKDATA_file tdata[16];
};

/* 136 */
enum MACRO_TIMERR
{
  TIMERR_NOERROR = 0,
  TIMERR_NOCANDO = 97,
  TIMERR_STRUCT = 129,
};

/* 137 */
enum MACRO_NULL
{
  NULL = 0,
};

/* 138 */
enum MACRO_TIME_ONESHOT
{
  TIME_ONESHOT = 0x0,
  TIME_PERIODIC = 0x1,
};

/* 139 */
enum Bullet_enum
{
  Snake_Lvl_1 = 0x1,
  Snake_Lvl_2 = 0x2,
  Snake_Lvl_3 = 0x3,
  Polar_Star_Lvl_1 = 0x4,
  Polar_Star_Lvl_2 = 0x5,
  Polar_Star_Lvl_3 = 0x6,
  Fireball_Lvl_1 = 0x7,
  Fireball_Lvl_2 = 0x8,
  Fireball_Lvl_3 = 0x9,
  Machine_Gun_Lvl_1 = 0xA,
  Machine_Gun_Lvl_2 = 0xB,
  Machine_Gun_Lvl_3 = 0xC,
  Missile_Launcher_Lvl_1 = 0xD,
  Missile_Launcher_Lvl_2 = 0xE,
  Missile_Launcher_Lvl_3 = 0xF,
  Missile_Explosion_Lvl_1 = 0x10,
  Missile_Explosion_Lvl_2 = 0x11,
  Missile_Explosion_Lvl_3 = 0x12,
  Bubbler_Lvl_1 = 0x13,
  Bubbler_Lvl_2 = 0x14,
  Bubbler_Lvl_3 = 0x15,
  Bubble_Spurs = 0x16,
  Blade_Lvl_1 = 0x19,
  Blade_Lvl_2 = 0x1A,
  Blade_Lvl_3 = 0x1B,
  Blade_Slash = 0x17,
  Unused_Bullet = 0x18,
  Super_Missile_Launcher_Lvl_1 = 0x1C,
  Super_Missile_Launcher_Lvl_2 = 0x1D,
  Super_Missile_Launcher_Lvl_3 = 0x1E,
  Nemesis_Lvl_1 = 0x22,
  Nemesis_Lvl_2 = 0x23,
  Nemesis_Lvl_3 = 0x24,
  Nemesis_Unkn = 0x2B,
  Chargeless_Spur_Lvl_1 = 0x25,
  Chargeless_Spur_Lvl_2 = 0x26,
  Chargeless_Spur_Lvl_3 = 0x27,
  Non_Moving_Spur_Lvl_1 = 0x28,
  Non_Moving_Spur_Lvl_2 = 0x29,
  Non_Moving_Spur_Lvl_3 = 0x2A,
  Spur_Lvl_2 = 0x2C,
  Spur_Lvl_3 = 0x2D,
};

/* 140 */
enum Music_enum
{
  Mus_Silence = 0x0,
  Mus_Mischievous_Robot = 0x1,
  Mus_Safety = 0x2,
  Mus_Game_Over = 0x3,
  Mus_Gravity = 0x4,
  Mus_On_To_Grasstown = 0x5,
  Mus_Meltdown_2 = 0x6,
  Mus_Eyes_Of_Flame = 0x7,
  Mus_Gestation = 0x8,
  Mus_Mimiga_Town = 0x9,
  Mus_Get_Item = 0xA,
  Mus_Balrogs_Theme = 0xB,
  Mus_Cemetary = 0xC,
  Mus_Plant = 0xD,
  Mus_Pulse = 0xE,
  Mus_Victory = 0xF,
  Mus_Get_Life_Capsule = 0x10,
  Mus_Tyrant = 0x11,
  Mus_Run = 0x12,
  Mus_Jenka_1 = 0x13,
  Mus_Labyrinth_Fight = 0x14,
  Mus_Access = 0x15,
  Mus_Oppression = 0x16,
  Mus_Geothermal = 0x17,
  Mus_Cave_Story = 0x18,
  Mus_Moonsong = 0x19,
  Mus_Heros_end = 0x1A,
  Mus_Scorching_Back = 0x1B,
  Mus_Quiet = 0x1C,
  Mus_Final_Cave = 0x1D,
  Mus_Balcony = 0x1E,
  Mus_Charge = 0x1F,
  Mus_Last_Battle = 0x20,
  Mus_The_Way_Back_Home = 0x21,
  Mus_Zombie = 0x22,
  Mus_Break_Down = 0x23,
  Mus_Running_Hell = 0x24,
  Mus_Jenka_2 = 0x25,
  Mus_Living_Waterway = 0x26,
  Mus_Seal_Chamber = 0x27,
  Mus_Torokos_Theme = 0x28,
  Mus_White = 0x29,
};

/* 141 */
enum Sound_Effects_enum
{
  Sfx_Y_N_Change_Choice = 0x1,
  Sfx_Message_Typing = 0x2,
  Sfx_Quote_Bump_Head = 0x3,
  Sfx_Switch_Weapon = 0x4,
  Sfx_Y_N_Prompt = 0x5,
  Sfx_High_Pitch_Critter_Hop = 0x6,
  Sfx_Door_Open = 0xB,
  Sfx_Destroy_Breakable_Block = 0xC,
  Sfx_Get_EXP = 0xE,
  Sfx_Quote_Jump = 0xF,
  Sfx_Quote_Hurt = 0x10,
  Sfx_Quote_Die = 0x11,
  Sfx_Y_N_Confirm = 0x12,
  Sfx_Quote_Heal = 0x14,
  Sfx_Bubble = 0x15,
  Sfx_Chest_Open = 0x16,
  Sfx_Quote_Hit_Ground = 0x17,
  Sfx_Quote_Walk = 0x18,
  Sfx_Silly_Explosion = 0x19,
  Sfx_Large_Object_Hit_Ground = 0x1A,
  Sfx_Level_Up = 0x1B,
  Sfx_Shot_Hit_Wall = 0x1C,
  Sfx_Teleport = 0x1D,
  Sfx_Critter_Hop = 0x1E,
  Sfx_Shot_Hit_Invulnerable_Entity = 0x1F,
  Sfx_Polar_Star_Shoot_Level_1_2 = 0x20,
  Sfx_Fireball_Shoot = 0x21,
  Sfx_Fireball_Bounce = 0x22,
  Sfx_large_Explosion = 0x23,
  Sfx_No_Ammo = 0x25,
  Sfx_Item_Get = 0x26,
  Sfx_Enemy_Shoot_Projectile = 0x27,
  Sfx_Stream_Noise_SSS_2 = 0x28,
  Sfx_Stream_Noise_SSS_1 = 0x29,
  Sfx_Quote_Missile_Get = 0x2A,
  Sfx_Computer_Screen_On = 0x2B,
  Sfx_Missile_Impact = 0x2C,
  Sfx_EXP_Bounce = 0x2D,
  Sfx_Iron_Head_Shot = 0x2E,
  Sfx_Strange_Click = 0x2F,
  Sfx_Bubbler_Shoot = 0x30,
  Sfx_Polar_Star_Shoot_Level_3 = 0x31,
  Sfx_Toroko_Enemy_Squeal = 0x32,
  Sfx_Critter_Small_Hurt = 0x33,
  Sfx_Behemoth_Large_Hurt = 0x34,
  Sfx_Gaudi_Die = 0x35,
  Sfx_Heavy_Press_Large_Object_Hurt = 0x36,
  Sfx_High_Pitched_Gaudi_Die = 0x37,
  Sfx_Water_Splash = 0x38,
  Sfx_Curly_Object_Hurt = 0x39,
  Sfx_Helicopter_Blades_SPS = 0x3A,
  Sfx_Spur_Charge_Level_1 = 0x3B,
  Sfx_Spur_Charge_Level_2 = 0x3C,
  Sfx_Spur_Charge_Level_3 = 0x3D,
  Sfx_Spur_Shoot_Level_1 = 0x3E,
  Sfx_Spur_Shoot_Level_2 = 0x3F,
  Sfx_Spur_Shoot_Level_3 = 0x40,
  Sfx_Spur_Charge_MAX = 0x41,
  Sfx_Enemy_Smoke_Poof = 0x46,
  Sfx_Quote_Smash_Into_Ground = 0x47,
  Sfx_Explosion = 0x48,
  Sfx_Bubbler_Shoot_Level_3 = 0x64,
  Sfx_Lightning = 0x65,
  Sfx_Sand_Croc = 0x66,
  Sfx_Ballos_Ball_etc_Charge_Curly_charging_her_gun = 0x67,
  Sfx_Secret_Item_Hurt = 0x68,
  Sfx_Puppy_Bark = 0x69,
  Sfx_Spinning_Projectile = 0x6A,
  Sfx_Block_Move = 0x6B,
  Sfx_Power_Critter_Large_Enemy_Jump = 0x6C,
  Sfx_Critter_Fly = 0x6D,
  Sfx_Power_Critter_Flys = 0x6E,
  Sfx_Thud = 0x6F,
  Sfx_Large_Thud = 0x70,
  Sfx_Booster = 0x71,
  Sfx_Core_Hurt = 0x72,
  Sfx_Core_Thrust = 0x73,
  Sfx_Core_Charge = 0x74,
  Sfx_Nemesis_Shot = 0x75,
  Sfx_Bass_Bass01_ = 0x96,
  Sfx_Snare_Snare01_ = 0x97,
  Sfx_HiClose_HiClose_ = 0x98,
  Sfx_HiOpen_HiOpen_ = 0x99,
  Sfx_Tom_Tom01_ = 0x9A,
  Sfx_Per_Per01_ = 0x9B,
  Sfx_Crashes_The_Game = 0xA0,
  Sfx_Silence_1 = 0x76,
  Sfx_Silence_2 = 0x77,
  Sfx_Silence_3 = 0x78,
  Sfx_Silence_4 = 0x79,
  Sfx_Silence_5 = 0x7A,
  Sfx_Silence_6 = 0x7B,
  Sfx_Silence_7 = 0x7C,
  Sfx_Silence_8 = 0x7D,
  Sfx_Silence_9 = 0x7E,
  Sfx_Silence_10 = 0x7F,
  Sfx_Silence_11 = 0x80,
  Sfx_Silence_12 = 0x81,
  Sfx_Silence_13 = 0x82,
  Sfx_Silence_14 = 0x83,
  Sfx_Silence_15 = 0x84,
  Sfx_Silence_16 = 0x85,
  Sfx_Silence_17 = 0x86,
  Sfx_Silence_18 = 0x87,
  Sfx_Silence_19 = 0x88,
  Sfx_Silence_20 = 0x89,
  Sfx_Silence_21 = 0x8A,
  Sfx_Silence_22 = 0x8B,
  Sfx_Silence_23 = 0x8C,
  Sfx_Silence_24 = 0x8D,
  Sfx_Silence_25 = 0x8E,
  Sfx_Silence_26 = 0x8F,
  Sfx_Silence_27 = 0x90,
  Sfx_Silence_28 = 0x91,
  Sfx_Silence_29 = 0x92,
  Sfx_Silence_30 = 0x93,
  Sfx_Silence_31 = 0x94,
  Sfx_Silence_32 = 0x95,
  Sfx_Silence_33 = 0x9C,
  Sfx_Silence_34 = 0x9D,
  Sfx_Silence_35 = 0x9E,
  Sfx_Silence_36 = 0x9F,
  Sfx_Silence_37 = 0x42,
  Sfx_Silence_38 = 0x43,
  Sfx_Silence_39 = 0x44,
  Sfx_Silence_40 = 0x45,
  Sfx_Silence_41 = 0x49,
  Sfx_Silence_42 = 0x4A,
  Sfx_Silence_43 = 0x4B,
  Sfx_Silence_44 = 0x4C,
  Sfx_Silence_45 = 0x4D,
  Sfx_Silence_46 = 0x4E,
  Sfx_Silence_47 = 0x4F,
  Sfx_Silence_48 = 0x50,
  Sfx_Silence_49 = 0x51,
  Sfx_Silence_50 = 0x52,
  Sfx_Silence_51 = 0x53,
  Sfx_Silence_52 = 0x54,
  Sfx_Silence_53 = 0x55,
  Sfx_Silence_54 = 0x56,
  Sfx_Silence_55 = 0x57,
  Sfx_Silence_56 = 0x58,
  Sfx_Silence_57 = 0x59,
  Sfx_Silence_58 = 0x5A,
  Sfx_Silence_59 = 0x5B,
  Sfx_Silence_60 = 0x5C,
  Sfx_Silence_61 = 0x5D,
  Sfx_Silence_62 = 0x5E,
  Sfx_Silence_63 = 0x5F,
  Sfx_Silence_64 = 0x60,
  Sfx_Silence_65 = 0x61,
  Sfx_Silence_66 = 0x62,
  Sfx_Silence_67 = 0x63,
  Sfx_Silence_68 = 0x0,
  Sfx_Silence_69 = 0xA,
  Sfx_Silence_70 = 0xD,
  Sfx_Silence_71 = 0x13,
  Sfx_Silence_72 = 0x24,
  Sfx_Silence_73 = 0x7,
  Sfx_Silence_74 = 0x8,
  Sfx_Silence_75 = 0x9,
};

/* 142 */
enum MACRO_IDM_COPY
{
  IDM_COPY = 15,
  IDM_CUT = 16,
  IDM_PASTE = 26,
  CMD_ZOOM_PAGEWIDTH = -1,
};

/* 195 */
typedef IDirectDraw *LPDIRECTDRAW;

/* 191 */
typedef HDC__ *HDC;

/* 144 */
typedef IDirectDrawClipper *LPDIRECTDRAWCLIPPER;

/* 146 */
typedef tagPALETTEENTRY *LPPALETTEENTRY;

/* 148 */
typedef IDirectDrawPalette *LPDIRECTDRAWPALETTE;

/* 150 */
typedef _DDSURFACEDESC *LPDDSURFACEDESC;

/* 165 */
typedef IDirectDrawSurface *LPDIRECTDRAWSURFACE;

/* 167 */
typedef HRESULT (__stdcall *LPDDENUMMODESCALLBACK)(LPDDSURFACEDESC, LPVOID);

/* 168 */
typedef HRESULT (__stdcall *LPDDENUMSURFACESCALLBACK)(LPDIRECTDRAWSURFACE, LPDDSURFACEDESC, LPVOID);

/* 170 */
typedef _DDCAPS DDCAPS;

/* 169 */
typedef DDCAPS *LPDDCAPS;

/* 143 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectDrawVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDraw *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDraw *This);
  ULONG (__cdecl *Release)(IDirectDraw *This);
  int (__cdecl *Compact)(LPDIRECTDRAW, HDC);
  HRESULT (__cdecl *CreateClipper)(IDirectDraw *This, DWORD, LPDIRECTDRAWCLIPPER *, IUnknown *);
  HRESULT (__stdcall *CreatePalette)(IDirectDraw *This, DWORD, LPPALETTEENTRY, LPDIRECTDRAWPALETTE *, IUnknown *);
  HRESULT (__cdecl *CreateSurface)(IDirectDraw *This, LPDDSURFACEDESC, LPDIRECTDRAWSURFACE *, IUnknown *);
  HRESULT (__stdcall *DuplicateSurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *EnumDisplayModes)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMMODESCALLBACK);
  HRESULT (__stdcall *EnumSurfaces)(IDirectDraw *This, DWORD, LPDDSURFACEDESC, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *FlipToGDISurface)(IDirectDraw *This);
  HRESULT (__stdcall *GetCaps)(IDirectDraw *This, LPDDCAPS, LPDDCAPS);
  HRESULT (__stdcall *GetDisplayMode)(IDirectDraw *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *GetFourCCCodes)(IDirectDraw *This, LPDWORD, LPDWORD);
  HRESULT (__stdcall *GetGDISurface)(IDirectDraw *This, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *GetMonitorFrequency)(IDirectDraw *This, LPDWORD);
  HRESULT (__stdcall *GetScanLine)(IDirectDraw *This, LPDWORD);
  void (__cdecl *GetVerticalBlankStatus)(LPDIRECTDRAW, HDC *);
  HRESULT (__stdcall *Initialize)(IDirectDraw *This, GUID *);
  HRESULT (__stdcall *RestoreDisplayMode)(IDirectDraw *This);
  HRESULT (__cdecl *SetCooperativeLevel)(LPDIRECTDRAW this, HWND, signed int);
  HRESULT (__cdecl *SetDisplayMode)(LPDIRECTDRAW This, int, int, int);
  HRESULT (__stdcall *WaitForVerticalBlank)(IDirectDraw *This, DWORD, HANDLE);
};
#pragma pack(pop)

/* 145 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectDrawClipper
{
  IDirectDrawClipperVtbl *lpVtbl;
};
#pragma pack(pop)

/* 147 */
struct tagPALETTEENTRY
{
  BYTE peRed;
  BYTE peGreen;
  BYTE peBlue;
  BYTE peFlags;
};

/* 149 */
struct IDirectDrawPalette
{
  struct IDirectDrawPalette::IDirectDrawPaletteVtbl *lpVtbl;
};

/* 152 */
union _DDSURFACEDESC::$091DBF7D405BE25E65B16620C008128B
{
  LONG lPitch;
  DWORD dwLinearSize;
};

/* 153 */
union _DDSURFACEDESC::$9AB659F8D6A45F8C7834A76B9C40973B
{
  DWORD dwMipMapCount;
  DWORD dwZBufferBitDepth;
  DWORD dwRefreshRate;
};

/* 155 */
struct _DDCOLORKEY
{
  DWORD dwColorSpaceLowValue;
  DWORD dwColorSpaceHighValue;
};

/* 154 */
typedef _DDCOLORKEY DDCOLORKEY;

/* 158 */
union _DDPIXELFORMAT::$10AA641B3215541DB69A48A361AE0013
{
  DWORD dwRGBBitCount;
  DWORD dwYUVBitCount;
  DWORD dwZBufferBitDepth;
  DWORD dwAlphaBitDepth;
};

/* 159 */
union _DDPIXELFORMAT::$0E0BD8DB15B3F2A790C062F781315157
{
  DWORD dwRBitMask;
  DWORD dwYBitMask;
};

/* 160 */
union _DDPIXELFORMAT::$DB4BDA43012B420E1DC9AEEACAA267A5
{
  DWORD dwGBitMask;
  DWORD dwUBitMask;
};

/* 161 */
union _DDPIXELFORMAT::$4C5EBD389D88C4C046794501FFF390F4
{
  DWORD dwBBitMask;
  DWORD dwVBitMask;
};

/* 162 */
union _DDPIXELFORMAT::$3ED4EC923A768B2489A9D1155BD11968
{
  DWORD dwRGBAlphaBitMask;
  DWORD dwYUVAlphaBitMask;
  DWORD dwRGBZBitMask;
  DWORD dwYUVZBitMask;
};

/* 157 */
struct _DDPIXELFORMAT
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwFourCC;
  union
  {
    DWORD dwRGBBitCount;
    DWORD dwYUVBitCount;
    DWORD dwZBufferBitDepth;
    DWORD dwAlphaBitDepth;
  };
  union
  {
    DWORD dwRBitMask;
    DWORD dwYBitMask;
  };
  union
  {
    DWORD dwGBitMask;
    DWORD dwUBitMask;
  };
  union
  {
    DWORD dwBBitMask;
    DWORD dwVBitMask;
  };
  union
  {
    DWORD dwRGBAlphaBitMask;
    DWORD dwYUVAlphaBitMask;
    DWORD dwRGBZBitMask;
    DWORD dwYUVZBitMask;
  };
};

/* 156 */
typedef _DDPIXELFORMAT DDPIXELFORMAT;

/* 164 */
struct _DDSCAPS
{
  DWORD dwCaps;
};

/* 163 */
typedef _DDSCAPS DDSCAPS;

/* 151 */
#pragma pack(push, 8)
struct __declspec(align(4)) _DDSURFACEDESC
{
  DWORD dwSize;
  DWORD dwFlags;
  DWORD dwHeight;
  DWORD dwWidth;
  _DDSURFACEDESC::$091DBF7D405BE25E65B16620C008128B anonymous_0;
  DWORD dwBackBufferCount;
  _DDSURFACEDESC::$9AB659F8D6A45F8C7834A76B9C40973B anonymous_1;
  DWORD dwAlphaBitDepth;
  DWORD dwReserved;
  LPVOID lpSurface;
  DDCOLORKEY ddckCKDestOverlay;
  DDCOLORKEY ddckCKDestBlt;
  DDCOLORKEY ddckCKSrcOverlay;
  DDCOLORKEY ddckCKSrcBlt;
  DDPIXELFORMAT ddpfPixelFormat;
  DDSCAPS ddsCaps;
};
#pragma pack(pop)

/* 166 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectDrawSurface
{
  IDirectDrawSurfaceVtbl *lpVtbl;
};
#pragma pack(pop)

/* 171 */
struct _DDCAPS
{
  DWORD dwSize;
  DWORD dwCaps;
  DWORD dwCaps2;
  DWORD dwCKeyCaps;
  DWORD dwFXCaps;
  DWORD dwFXAlphaCaps;
  DWORD dwPalCaps;
  DWORD dwSVCaps;
  DWORD dwAlphaBltConstBitDepths;
  DWORD dwAlphaBltPixelBitDepths;
  DWORD dwAlphaBltSurfaceBitDepths;
  DWORD dwAlphaOverlayConstBitDepths;
  DWORD dwAlphaOverlayPixelBitDepths;
  DWORD dwAlphaOverlaySurfaceBitDepths;
  DWORD dwZBufferBitDepths;
  DWORD dwVidMemTotal;
  DWORD dwVidMemFree;
  DWORD dwMaxVisibleOverlays;
  DWORD dwCurrVisibleOverlays;
  DWORD dwNumFourCCCodes;
  DWORD dwAlignBoundarySrc;
  DWORD dwAlignSizeSrc;
  DWORD dwAlignBoundaryDest;
  DWORD dwAlignSizeDest;
  DWORD dwAlignStrideAlign;
  DWORD dwRops[8];
  DDSCAPS ddsCaps;
  DWORD dwMinOverlayStretch;
  DWORD dwMaxOverlayStretch;
  DWORD dwMinLiveVideoStretch;
  DWORD dwMaxLiveVideoStretch;
  DWORD dwMinHwCodecStretch;
  DWORD dwMaxHwCodecStretch;
  DWORD dwReserved1;
  DWORD dwReserved2;
  DWORD dwReserved3;
  DWORD dwSVBCaps;
  DWORD dwSVBCKeyCaps;
  DWORD dwSVBFXCaps;
  DWORD dwSVBRops[8];
  DWORD dwVSBCaps;
  DWORD dwVSBCKeyCaps;
  DWORD dwVSBFXCaps;
  DWORD dwVSBRops[8];
  DWORD dwSSBCaps;
  DWORD dwSSBCKeyCaps;
  DWORD dwSSBFXCaps;
  DWORD dwSSBRops[8];
  DWORD dwMaxVideoPorts;
  DWORD dwCurrVideoPorts;
  DWORD dwSVBCaps2;
  DWORD dwNLVBCaps;
  DWORD dwNLVBCaps2;
  DWORD dwNLVBCKeyCaps;
  DWORD dwNLVBFXCaps;
  DWORD dwNLVBRops[8];
};

/* 172 */
typedef BOOL *LPBOOL;

/* 175 */
enum Menu_Buttons_Fields
{
  Button_Quit = 0x9C41,
  Button_Volume = 0x9C44,
  Button_Version = 0x9C42,
  Button_Debug_Save = 0x9C45,
  Button_Mute = 0x9C47,
  Button_OK = 0x1,
  Button_Cancel = 0x2,
  Button_Mute_0 = 0x3F2,
  Button_Mute_1 = 0x3FA,
  Button_Mute_2 = 0x3FB,
  Button_Mute_3 = 0x3FC,
  Button_Mute_4 = 0x3FD,
  Button_Mute_5 = 0x3FE,
  Button_Mute_6 = 0x3FF,
  Button_Mute_7 = 0x400,
  Button_Yes = 0x1,
  Button_No = 0x2,
  Field_Quit_Message = 0x3F1,
  Field_About_Message = 0x3F3,
  Field_Save_File = 0x3F0,
};

/* 177 */
typedef tagRECT *LPRECT;

/* 179 */
typedef _DDBLTFX DDBLTFX;

/* 178 */
typedef DDBLTFX *LPDDBLTFX;

/* 187 */
typedef _DDBLTBATCH DDBLTBATCH;

/* 186 */
typedef DDBLTBATCH *LPDDBLTBATCH;

/* 189 */
typedef DDSCAPS *LPDDSCAPS;

/* 190 */
typedef DDCOLORKEY *LPDDCOLORKEY;

/* 193 */
typedef __int32 *LPLONG;

/* 194 */
typedef DDPIXELFORMAT *LPDDPIXELFORMAT;

/* 197 */
typedef _DDOVERLAYFX DDOVERLAYFX;

/* 196 */
typedef DDOVERLAYFX *LPDDOVERLAYFX;

/* 176 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectDrawSurfaceVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawSurface *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawSurface *This);
  ULONG (__cdecl *Release)(IDirectDrawSurface *This);
  HRESULT (__stdcall *AddAttachedSurface)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE);
  HRESULT (__stdcall *AddOverlayDirtyRect)(IDirectDrawSurface *This, LPRECT);
  HRESULT (__stdcall *Blt)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDBLTFX);
  HRESULT (__stdcall *BltBatch)(IDirectDrawSurface *This, LPDDBLTBATCH, DWORD, DWORD);
  HRESULT (__stdcall *BltFast)(IDirectDrawSurface *This, DWORD, DWORD, LPDIRECTDRAWSURFACE, LPRECT, DWORD);
  HRESULT (__stdcall *DeleteAttachedSurface)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);
  HRESULT (__stdcall *EnumAttachedSurfaces)(IDirectDrawSurface *This, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *EnumOverlayZOrders)(IDirectDrawSurface *This, DWORD, LPVOID, LPDDENUMSURFACESCALLBACK);
  HRESULT (__stdcall *Flip)(IDirectDrawSurface *This, LPDIRECTDRAWSURFACE, DWORD);
  HRESULT (__stdcall *GetAttachedSurface)(IDirectDrawSurface *This, LPDDSCAPS, LPDIRECTDRAWSURFACE *);
  HRESULT (__stdcall *GetBltStatus)(IDirectDrawSurface *This, DWORD);
  HRESULT (__stdcall *GetCaps)(IDirectDrawSurface *This, LPDDSCAPS);
  HRESULT (__stdcall *GetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER *);
  HRESULT (__stdcall *GetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);
  HRESULT (__cdecl *GetDC)(IDirectDrawSurface *This, HDC *);
  HRESULT (__stdcall *GetFlipStatus)(IDirectDrawSurface *This, DWORD);
  HRESULT (__stdcall *GetOverlayPosition)(IDirectDrawSurface *This, LPLONG, LPLONG);
  HRESULT (__stdcall *GetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE *);
  HRESULT (__stdcall *GetPixelFormat)(IDirectDrawSurface *This, LPDDPIXELFORMAT);
  HRESULT (__stdcall *GetSurfaceDesc)(IDirectDrawSurface *This, LPDDSURFACEDESC);
  HRESULT (__stdcall *Initialize)(IDirectDrawSurface *This, LPDIRECTDRAW, LPDDSURFACEDESC);
  HRESULT (__cdecl *IsLost)(IDirectDrawSurface *This);
  HRESULT (__cdecl *Lock)(IDirectDrawSurface *This, LPRECT, LPDDSURFACEDESC, DWORD, HANDLE);
  HRESULT (__cdecl *ReleaseDC)(IDirectDrawSurface *This, HDC);
  HRESULT (__cdecl *Restore)(IDirectDrawSurface *This);
  HRESULT (__cdecl *SetClipper)(IDirectDrawSurface *This, LPDIRECTDRAWCLIPPER);
  HRESULT (__cdecl *SetColorKey)(IDirectDrawSurface *This, DWORD, LPDDCOLORKEY);
  HRESULT (__stdcall *SetOverlayPosition)(IDirectDrawSurface *This, LONG, LONG);
  HRESULT (__stdcall *SetPalette)(IDirectDrawSurface *This, LPDIRECTDRAWPALETTE);
  HRESULT (__stdcall *Unlock)(IDirectDrawSurface *This, LPVOID);
  HRESULT (__stdcall *UpdateOverlay)(IDirectDrawSurface *This, LPRECT, LPDIRECTDRAWSURFACE, LPRECT, DWORD, LPDDOVERLAYFX);
  HRESULT (__stdcall *UpdateOverlayDisplay)(IDirectDrawSurface *This, DWORD);
  HRESULT (__stdcall *UpdateOverlayZOrder)(IDirectDrawSurface *This, DWORD, LPDIRECTDRAWSURFACE);
};
#pragma pack(pop)

/* 181 */
union _DDBLTFX::$EA6EC20695B0AA8ECF92A441DE55A935
{
  DWORD dwZDestConst;
  LPDIRECTDRAWSURFACE lpDDSZBufferDest;
};

/* 182 */
union _DDBLTFX::$702C52B3655764E63C007A6B73D01C19
{
  DWORD dwZSrcConst;
  LPDIRECTDRAWSURFACE lpDDSZBufferSrc;
};

/* 183 */
union _DDBLTFX::$3639C047B3E88B857708792B1F3FEC83
{
  DWORD dwAlphaDestConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaDest;
};

/* 184 */
union _DDBLTFX::$C0828DA952883A43DEF8D462ACC90C87
{
  DWORD dwAlphaSrcConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
};

/* 185 */
union _DDBLTFX::$4C109671A06E28B8127C40041AB5795C
{
  DWORD dwFillColor;
  DWORD dwFillDepth;
  DWORD dwFillPixel;
  LPDIRECTDRAWSURFACE lpDDSPattern;
};

/* 180 */
struct _DDBLTFX
{
  DWORD dwSize;
  DWORD dwDDFX;
  DWORD dwROP;
  DWORD dwDDROP;
  DWORD dwRotationAngle;
  DWORD dwZBufferOpCode;
  DWORD dwZBufferLow;
  DWORD dwZBufferHigh;
  DWORD dwZBufferBaseDest;
  DWORD dwZDestConstBitDepth;
  union
  {
    DWORD dwZDestConst;
    LPDIRECTDRAWSURFACE lpDDSZBufferDest;
  };
  DWORD dwZSrcConstBitDepth;
  union
  {
    DWORD dwZSrcConst;
    LPDIRECTDRAWSURFACE lpDDSZBufferSrc;
  };
  DWORD dwAlphaEdgeBlendBitDepth;
  DWORD dwAlphaEdgeBlend;
  DWORD dwReserved;
  DWORD dwAlphaDestConstBitDepth;
  union
  {
    DWORD dwAlphaDestConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaDest;
  };
  DWORD dwAlphaSrcConstBitDepth;
  union
  {
    DWORD dwAlphaSrcConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
  };
  union
  {
    DWORD dwFillColor;
    DWORD dwFillDepth;
    DWORD dwFillPixel;
    LPDIRECTDRAWSURFACE lpDDSPattern;
  };
  DDCOLORKEY ddckDestColorkey;
  DDCOLORKEY ddckSrcColorkey;
};

/* 188 */
struct _DDBLTBATCH
{
  LPRECT lprDest;
  LPDIRECTDRAWSURFACE lpDDSSrc;
  LPRECT lprSrc;
  DWORD dwFlags;
  LPDDBLTFX lpDDBltFx;
};

/* 192 */
struct HDC__
{
  int unused;
};

/* 199 */
union _DDOVERLAYFX::$3639C047B3E88B857708792B1F3FEC83
{
  DWORD dwAlphaDestConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaDest;
};

/* 200 */
union _DDOVERLAYFX::$C0828DA952883A43DEF8D462ACC90C87
{
  DWORD dwAlphaSrcConst;
  LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
};

/* 198 */
struct _DDOVERLAYFX
{
  DWORD dwSize;
  DWORD dwAlphaEdgeBlendBitDepth;
  DWORD dwAlphaEdgeBlend;
  DWORD dwReserved;
  DWORD dwAlphaDestConstBitDepth;
  union
  {
    DWORD dwAlphaDestConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaDest;
  };
  DWORD dwAlphaSrcConstBitDepth;
  union
  {
    DWORD dwAlphaSrcConst;
    LPDIRECTDRAWSURFACE lpDDSAlphaSrc;
  };
  DDCOLORKEY dckDestColorkey;
  DDCOLORKEY dckSrcColorkey;
  DWORD dwDDFX;
  DWORD dwFlags;
};

/* 201 */
enum MACRO_DDBLT
{
  DDBLT_ALPHADEST = 0x1,
  DDBLT_ALPHADESTCONSTOVERRIDE = 0x2,
  DDBLT_ALPHADESTNEG = 0x4,
  DDBLT_ALPHADESTSURFACEOVERRIDE = 0x8,
  DDBLT_ALPHAEDGEBLEND = 0x10,
  DDBLT_ALPHASRC = 0x20,
  DDBLT_ALPHASRCCONSTOVERRIDE = 0x40,
  DDBLT_ALPHASRCNEG = 0x80,
  DDBLT_ALPHASRCSURFACEOVERRIDE = 0x100,
  DDBLT_ASYNC = 0x200,
  DDBLT_COLORFILL = 0x400,
  DDBLT_DDFX = 0x800,
  DDBLT_DDROPS = 0x1000,
  DDBLT_KEYDEST = 0x2000,
  DDBLT_KEYDESTOVERRIDE = 0x4000,
  DDBLT_KEYSRC = 0x8000,
  DDBLT_KEYSRCOVERRIDE = 0x10000,
  DDBLT_ROP = 0x20000,
  DDBLT_ROTATIONANGLE = 0x40000,
  DDBLT_ZBUFFER = 0x80000,
  DDBLT_ZBUFFERDESTCONSTOVERRIDE = 0x100000,
  DDBLT_ZBUFFERDESTOVERRIDE = 0x200000,
  DDBLT_ZBUFFERSRCCONSTOVERRIDE = 0x400000,
  DDBLT_ZBUFFERSRCOVERRIDE = 0x800000,
  DDBLT_WAIT = 0x1000000,
  DDBLT_DEPTHFILL = 0x2000000,
};

/* 202 */
typedef _DDSURFACEDESC DDSURFACEDESC;

/* 203 */
enum MACRO_DDERR_OUTOFMEMORY
{
  DDERR_OUTOFMEMORY = -2147024882,
  DDERR_OUTOFVIDEOMEMORY = -2005532292,
  DDERR_OVERLAYCANTCLIP = -2005532290,
  DDERR_OVERLAYCOLORKEYONLYONEACTIVE = -2005532288,
  DDERR_PALETTEBUSY = -2005532285,
  DDERR_COLORKEYNOTSET = -2005532272,
  DDERR_SURFACEALREADYATTACHED = -2005532262,
  DDERR_SURFACEALREADYDEPENDENT = -2005532252,
  DDERR_SURFACEBUSY = -2005532242,
  DDERR_CANTLOCKSURFACE = -2005532237,
  DDERR_SURFACEISOBSCURED = -2005532232,
  DDERR_SURFACELOST = -2005532222,
  DDERR_SURFACENOTATTACHED = -2005532212,
  DDERR_TOOBIGHEIGHT = -2005532202,
  DDERR_TOOBIGSIZE = -2005532192,
  DDERR_TOOBIGWIDTH = -2005532182,
};

/* 204 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectInputA
{
  IDirectInputAVtbl *lpVtbl;
};
#pragma pack(pop)

/* 206 */
typedef IDirectInputDeviceA *LPDIRECTINPUTDEVICEA;

/* 209 */
typedef const DIDEVICEINSTANCEA *LPCDIDEVICEINSTANCEA;

/* 208 */
typedef BOOL (__stdcall *LPDIENUMDEVICESCALLBACKA)(LPCDIDEVICEINSTANCEA, LPVOID);

/* 205 */
struct IDirectInputAVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectInputA *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectInputA *This);
  ULONG (__stdcall *Release)(IDirectInputA *This);
  HRESULT (__stdcall *CreateDevice)(IDirectInputA *This, const GUID *const , LPDIRECTINPUTDEVICEA *, LPUNKNOWN);
  HRESULT (__stdcall *EnumDevices)(IDirectInputA *This, DWORD, LPDIENUMDEVICESCALLBACKA, LPVOID, DWORD);
  HRESULT (__stdcall *GetDeviceStatus)(IDirectInputA *This, const GUID *const );
  HRESULT (__stdcall *RunControlPanel)(IDirectInputA *This, HWND, DWORD);
  HRESULT (__stdcall *Initialize)(IDirectInputA *This, HINSTANCE, DWORD);
};

/* 207 */
struct IDirectInputDeviceA
{
  struct IDirectInputDeviceA::IDirectInputDeviceAVtbl *lpVtbl;
};

/* 211 */
typedef char CHAR;

/* 210 */
struct DIDEVICEINSTANCEA
{
  DWORD dwSize;
  GUID guidInstance;
  GUID guidProduct;
  DWORD dwDevType;
  CHAR tszInstanceName[260];
  CHAR tszProductName[260];
  GUID guidFFDriver;
  WORD wUsagePage;
  WORD wUsage;
};

/* 213 */
struct HINSTANCE__
{
  int unused;
};

/* 214 */
enum MACRO_DDSCL
{
  DDSCL_FULLSCREEN = 0x1,
  DDSCL_ALLOWREBOOT = 0x2,
  DDSCL_NOWINDOWCHANGES = 0x4,
  DDSCL_NORMAL = 0x8,
  DDSCL_EXCLUSIVE = 0x10,
  DDSCL_ALLOWMODEX = 0x40,
  DDSCL_SETFOCUSWINDOW = 0x80,
  DDSCL_SETDEVICEWINDOW = 0x100,
  DDSCL_CREATEDEVICEWINDOW = 0x200,
};

/* 215 */
enum InitDirectDraw_Modes
{
  Mode_320_240_Windowed = 0x0,
  Mode_640_480_Windowed = 0x1,
  Mode_Fullscreen = 0x2,
};

/* 216 */
enum Display_Modes
{
  Display_FullScreen = 0x0,
  Display_320_240_Windowed = 0x1,
  Display_640_480_Windowed = 0x2,
  Display_Full_24_Bit = 0x3,
  Display_Full_32_Bit = 0x4,
};

/* 218 */
typedef _RGNDATA *LPRGNDATA;

/* 217 */
#pragma pack(push, 8)
struct __declspec(align(4)) IDirectDrawClipperVtbl
{
  HRESULT (__stdcall *QueryInterface)(IDirectDrawClipper *This, const IID *const riid, LPVOID *ppvObj);
  ULONG (__stdcall *AddRef)(IDirectDrawClipper *This);
  ULONG (__stdcall *Release)(IDirectDrawClipper *This);
  HRESULT (__stdcall *GetClipList)(IDirectDrawClipper *This, LPRECT, LPRGNDATA, LPDWORD);
  HRESULT (__stdcall *GetHWnd)(IDirectDrawClipper *This, HWND *);
  HRESULT (__stdcall *Initialize)(IDirectDrawClipper *This, LPDIRECTDRAW, DWORD);
  HRESULT (__stdcall *IsClipListChanged)(IDirectDrawClipper *This, BOOL *);
  HRESULT (__stdcall *SetClipList)(IDirectDrawClipper *This, LPRGNDATA, DWORD);
  HRESULT (__cdecl *SetHWnd)(IDirectDrawClipper *This, DWORD, HWND);
};
#pragma pack(pop)

/* 221 */
struct _RGNDATAHEADER
{
  DWORD dwSize;
  DWORD iType;
  DWORD nCount;
  DWORD nRgnSize;
  RECT rcBound;
};

/* 220 */
typedef _RGNDATAHEADER RGNDATAHEADER;

/* 219 */
struct _RGNDATA
{
  RGNDATAHEADER rdh;
  char Buffer[1];
};

/* 222 */
enum MACRO_DDSD
{
  DDSD_CAPS = 0x1,
  DDSD_HEIGHT = 0x2,
  DDSD_WIDTH = 0x4,
  DDSD_PITCH = 0x8,
  DDSD_BACKBUFFERCOUNT = 0x20,
  DDSD_ZBUFFERBITDEPTH = 0x40,
  DDSD_ALPHABITDEPTH = 0x80,
  DDSD_LPSURFACE = 0x800,
  DDSD_PIXELFORMAT = 0x1000,
  DDSD_CKDESTOVERLAY = 0x2000,
  DDSD_CKDESTBLT = 0x4000,
  DDSD_CKSRCOVERLAY = 0x8000,
  DDSD_CKSRCBLT = 0x10000,
  DDSD_MIPMAPCOUNT = 0x20000,
  DDSD_REFRESHRATE = 0x40000,
  DDSD_LINEARSIZE = 0x80000,
  DDSD_ALL = 0xFF9EE,
};

/* 223 */
enum MACRO_WSA_WAIT
{
  WSA_WAIT_EVENT_0 = 0,
  WSA_WAIT_TIMEOUT = 258,
  WSA_INFINITE = -1,
};

/* 224 */
enum MACRO_WS
{
  WS_OVERLAPPED = 0x0,
  WS_POPUP = 0x80000000,
  WS_CHILD = 0x40000000,
  WS_MINIMIZE = 0x20000000,
  WS_VISIBLE = 0x10000000,
  WS_DISABLED = 0x8000000,
  WS_CLIPSIBLINGS = 0x4000000,
  WS_CLIPCHILDREN = 0x2000000,
  WS_MAXIMIZE = 0x1000000,
  WS_CAPTION = 0xC00000,
  WS_BORDER = 0x800000,
  WS_DLGFRAME = 0x400000,
  WS_VSCROLL = 0x200000,
  WS_HSCROLL = 0x100000,
  WS_SYSMENU = 0x80000,
  WS_THICKFRAME = 0x40000,
  WS_GROUP = 0x20000,
  WS_TABSTOP = 0x10000,
  WS_MINIMIZEBOX = 0x20000,
  WS_MAXIMIZEBOX = 0x10000,
  WS_TILED = 0x0,
  WS_ICONIC = 0x20000000,
  WS_SIZEBOX = 0x40000,
  WS_OVERLAPPEDWINDOW = 0xCF0000,
  WS_POPUPWINDOW = 0x80880000,
  WS_CHILDWINDOW = 0x40000000,
};

/* 225 */
enum MACRO_DDSCAPS
{
  DDSCAPS_RESERVED1 = 0x1,
  DDSCAPS_ALPHA = 0x2,
  DDSCAPS_BACKBUFFER = 0x4,
  DDSCAPS_COMPLEX = 0x8,
  DDSCAPS_FLIP = 0x10,
  DDSCAPS_FRONTBUFFER = 0x20,
  DDSCAPS_OFFSCREENPLAIN = 0x40,
  DDSCAPS_OVERLAY = 0x80,
  DDSCAPS_PALETTE = 0x100,
  DDSCAPS_PRIMARYSURFACE = 0x200,
  DDSCAPS_PRIMARYSURFACELEFT = 0x400,
  DDSCAPS_SYSTEMMEMORY = 0x800,
  DDSCAPS_TEXTURE = 0x1000,
  DDSCAPS_3DDEVICE = 0x2000,
  DDSCAPS_VIDEOMEMORY = 0x4000,
  DDSCAPS_VISIBLE = 0x8000,
  DDSCAPS_WRITEONLY = 0x10000,
  DDSCAPS_ZBUFFER = 0x20000,
  DDSCAPS_OWNDC = 0x40000,
  DDSCAPS_LIVEVIDEO = 0x80000,
  DDSCAPS_HWCODEC = 0x100000,
  DDSCAPS_MODEX = 0x200000,
  DDSCAPS_MIPMAP = 0x400000,
  DDSCAPS_RESERVED2 = 0x800000,
  DDSCAPS_ALLOCONLOAD = 0x4000000,
  DDSCAPS_VIDEOPORT = 0x8000000,
  DDSCAPS_LOCALVIDMEM = 0x10000000,
  DDSCAPS_NONLOCALVIDMEM = 0x20000000,
  DDSCAPS_STANDARDVGAMODE = 0x40000000,
  DDSCAPS_OPTIMIZED = 0x80000000,
};

/* 226 */
enum MACRO_R2_LAST
{
  R2_LAST = 16,
  SRCCOPY = 13369376,
  SRCPAINT = 15597702,
};

